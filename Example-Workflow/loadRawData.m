function [data, meta] = loadRawData(filePath, seriesNumber)
 
% LOADRAWDATA loads a specified image file. The example file is in .nd2 
% format which is the proprietary Nikon format generated by the acquisition
% software.
%
% INPUT filePath: String containing location and name of the raw data file.
%                 File format should be readable using Bio-formats
%       seriesNumber: Series to be loaded (if only single series set to 1)
%
% OUTPUT data: 5D matrix containing the loaded image data. 
%               Format - (X, Y, Z, T, C)
%        meta: metadata containing voxel sizes 
%
% REMARKS: Requires the Bio-Formats Matlab Toolbox available at
% http://downloads.openmicroscopy.org/bio-formats/5.2.3/
%
% created by: Jeremy Pike
% DATE: 15-Oct-2016
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
disp('Loading data ...')
 
% Get reader object for specified file
reader = bfGetReader(filePath);
% Load OME metadata
omeMeta = reader.getMetadataStore();
% Set reader to specified series
reader.setSeries(seriesNumber - 1);
 
% Pull data dimensions from metadata
rows = omeMeta.getPixelsSizeY(seriesNumber - 1).getValue();
cols = omeMeta.getPixelsSizeX(seriesNumber - 1).getValue();
numSlices = omeMeta.getPixelsSizeZ(seriesNumber - 1).getValue();
numTimePoints = omeMeta.getPixelsSizeT(seriesNumber - 1).getValue();
numChannels = omeMeta.getPixelsSizeC(seriesNumber - 1).getValue();
 
% Pull out voxel sizes
meta.voxelSizeX = double(omeMeta.getPixelsPhysicalSizeX(seriesNumber - 1).value(ome.units.UNITS.MICROMETER));
meta.voxelSizeY = double(omeMeta.getPixelsPhysicalSizeY(seriesNumber - 1).value(ome.units.UNITS.MICROMETER));
meta.voxelSizeZ = double(omeMeta.getPixelsPhysicalSizeZ(seriesNumber - 1).value(ome.units.UNITS.MICROMETER));
 
% Pull out data type
dataType = char(omeMeta.getPixelsType(seriesNumber - 1).getValue());
% Create empty matrix for data with specified data type
data = zeros(rows, cols, numSlices, numTimePoints, numChannels, dataType);
 
% Loop through channels
for c = 1:numChannels
    % Loop through time-points
    for t = 1:numTimePoints
        % Loop through axial slices
        for z = 1:numSlices
            
            % Find plane index for specified channel, time-point and slice
            iPlane = reader.getIndex(z - 1, c - 1, t - 1) + 1;
            
            % Load image plane and store in data
            data(:,:,z,t,c) = bfGetPlane(reader, iPlane);
 
        end
    end
end
 
 
end
 
